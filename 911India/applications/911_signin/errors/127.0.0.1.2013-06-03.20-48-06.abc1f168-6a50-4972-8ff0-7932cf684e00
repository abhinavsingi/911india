(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'ctr_unread'"
p3
sS'layer'
p4
S'/home/enigma/web2py/applications/911_signin/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\nfrom gluon.contrib.login_methods.rpx_account import use_janrain\nfrom gluon.contrib.login_methods.extended_login_form import ExtendedLoginForm\n\n@auth.requires_login()\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    response.flash = "Welcome to web2py!"\n    return dict(message=T(\'Hello World\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    \n    form_janrain = use_janrain(auth,filename=\'private/janrain.key\')\n    auth.settings.login_form = ExtendedLoginForm(auth, form_janrain, signals=[\'token\'])\n    return dict(form=auth())\n\n\ndef home():\n    return dict(uid=auth.user_id)\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\n\n@auth.requires_login()\ndef profile():\n\ttmp_usr=db(db.users.username == auth.user.username)(db.users.email == auth.user.email).select().first()\n\tif tmp_usr==None:\n\t\tdb.users.first_name.default=auth.user.first_name\n\t\tdb.users.last_name.default=auth.user.last_name\n\t\tdb.users.username.default=auth.user.username\n\t\tdb.users.email.default=auth.user.email\n\t\tform=SQLFORM(db.users)\n\n\telse:\n\t\tdb.users.first_name.default=tmp_usr.first_name\n\t\tdb.users.last_name.default=tmp_usr.last_name\n\t\tdb.users.username.default=tmp_usr.username\n\t\tdb.users.email.default=tmp_usr.email\n\t\tform=SQLFORM(db.users,tmp_usr.id,showid=False)\n\n\tif form.process().accepted:\n\t\tresponse.flash=\'Profile updated\'\n\treturn dict(form=form)\n\n@auth.requires_login()\ndef compose():\n\tdb.message.sender.default=auth.user.username\n\tdb.message.read.default=False\n\tform=SQLFORM(db.message)\n\n\tif form.process().accepted:\n\t\tresponse.flash=\'Message Sent\'\n\t\trow = db(db.auth_users.username == form.vars.reciever).select().first()\n\t\tif row:\n\t\t\tctr=row.ctr_unread+1\n\t\t\tdb.auth_users[row.id] = dict(ctr_unread=ctr)\n\treturn dict(form=form)\n\n@auth.requires_login()\ndef inbox():\n\tinbox=db(db.message.reciever == auth.user.username).select(db.message.id, db.message.sender,db.message.subject,db.message.read, orderby=~db.message.id )\n\treturn dict(inbox=inbox)\n\n@auth.requires_login()\ndef message():\n\tmail = db.message(request.args(0))\n\tdb.message[mail.id] = dict(read=True)\n\treturn dict(mail=mail)\n\nresponse._vars=response._caller(compose)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/enigma/web2py/gluon/restricted.py", line 205, in restricted\n    exec ccode in environment\n  File "/home/enigma/web2py/applications/911_signin/controllers/default.py", line 131, in <module>\n  File "/home/enigma/web2py/gluon/globals.py", line 173, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/enigma/web2py/gluon/tools.py", line 2580, in f\n    return action(*a, **b)\n  File "/home/enigma/web2py/applications/911_signin/controllers/default.py", line 116, in compose\n    ctr=row.ctr_unread+1\n  File "/home/enigma/web2py/gluon/dal.py", line 5657, in __getattr__\n    return self[key]\n  File "/home/enigma/web2py/gluon/dal.py", line 5648, in __getitem__\n    return dict.__getitem__(self, key)\nKeyError: \'ctr_unread\'\n'
p11
s.