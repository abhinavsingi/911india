(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'events'"
p3
sS'layer'
p4
S'/home/krutarth/Downloads/911india/applications/911_signin/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\nfrom gluon.contrib.login_methods.rpx_account import use_janrain\nfrom gluon.contrib.login_methods.extended_login_form import ExtendedLoginForm\n\n@auth.requires_login()\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    response.flash = "Welcome to web2py!"\n    return dict(message=T(\'Hello World\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    \n    form_janrain = use_janrain(auth,filename=\'private/janrain.key\')\n    auth.settings.login_form = ExtendedLoginForm(auth, form_janrain, signals=[\'token\'])\n    return dict(form=auth())\n\n\ndef home():\n    return dict(uid=auth.user_id)\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\n@auth.requires_login()\ndef myprofile():\n\ttmp_usr=db(db.basic_info.username == auth.user.username)(db.basic_info.email == auth.user.email).select().first()\n\tif tmp_usr==None:\n\t\tdb.basic_info.email.default=auth.user.email\n\t\tform=SQLFORM(db.basic_info, submit_button=\'Create Profile\')\n\t\tform.vars.first_name=auth.user.first_name\n\t\tform.vars.last_name=auth.user.last_name\n\t\tform.vars.username=auth.user.username\n\n\telse:\n\t\tform=SQLFORM(db.basic_info,tmp_usr.id,showid=False, submit_button=\'Update Profile\')\n\n\tform.vars.prefix = \'Mr.\'\n\tform.vars.email_share_with = \'Only my network\'\n\tform.vars.phone_share_with = \'Only my network\'\n\n\tdb.experience.username.default=auth.user.username\n\tdb.education.username.default=auth.user.username\n\tform2=SQLFORM(db.experience, submit_button=\'Add experience\')\n\tform3=SQLFORM(db.education, submit_button=\'Add education\')\n\n\tif form.process().accepted:\n\t\tresponse.flash=\'Profile updated\'\n\n\tif form2.process().accepted:\n\t\tresponse.flash=\'Experience added\'\n\n\tif form3.process().accepted:\n\t\tresponse.flash=\'Education added\'\n\n\texperience=db(db.experience.username == auth.user.username).select()\n\teducation=db(db.education.username == auth.user.username).select()\n\n\treturn dict(form=form, form2=form2, form3=form3, experience=experience, education=education)\n\n\n\ndef profile():\n\tuname = request.args(0)\n\tuser_obj = db(db.auth_users.username == uname).select()\n\tprofile_obj = db(db.basic_info.username == uname).select()\n\texp_obj = db(db.experience.username == uname).select()\n\tedu_obj = db(db.education.username == uname).select()\n\treturn dict(user=user_obj, profile=profile_obj, experience=exp_obj, education=edu_obj)\n\n\n@auth.requires_login()\ndef changepicture():\n\ttmp_pic=db(db.profile_pic.uname == auth.user.username).select()\n\tif tmp_pic:\n\t\tform=SQLFORM(db.profile_pic,tmp_pic.first().id,showid=False, submit_button=\'Upload Picture\')\n\telse:\n\t\tdb.profile_pic.uname.default=auth.user.username\n\t\tform=SQLFORM(db.profile_pic, submit_button=\'Upload Picture\')\n\n\tif form.process().accepted:\n\t\tresponse.flash=\'Image uploaded\'\n\t\tredirect(URL(\'myprofile\'))\n\n\treturn dict(form=form)\n\n\n@auth.requires_login()\ndef compose():\n\tform=SQLFORM(db.message)\n\tform.vars.sender=auth.user.username\n\tform.vars.read=False\n\n\tif form.process().accepted:\n\t\tresponse.flash=\'Message Sent\'\n\t\trow = db(db.auth_users.username == form.vars.reciever).select().first()\n\t\tif row:\n\t\t\tctr=row.unread_ctr+1\n\t\t\tdb.auth_users[row.id] = dict(unread_ctr=ctr)\n\treturn dict(form=form)\n\n@auth.requires_login()\ndef inbox():\n\tinbox=db(db.message.reciever == auth.user.username).select(db.message.id, db.message.sender,db.message.subject,db.message.read, orderby=~db.message.id )\n\treturn dict(inbox=inbox)\n\n@auth.requires_login()\ndef message():\n\tmail = db.message(request.args(0))\n\tif mail.read == False:\n\t\tdb.message[mail.id] = dict(read=True)\n\t\tctr = db.auth_users(auth.user.id).unread_ctr-1\n\t\tdb.auth_users[auth.user.id]\t= dict(unread_ctr=ctr)\n\treturn dict(mail=mail)\n\n@auth.requires_login()\ndef outbox():\n\toutbox=db(db.message.sender == auth.user.username).select(db.message.id, db.message.reciever,db.message.subject, db.message.read, orderby=~db.message.id )\n\treturn dict(outbox=outbox)\n\n@auth.requires_login()\ndef sent_message():\n\tmail = db.message(request.args(0))\n\treturn dict(mail=mail)\n\n@auth.requires_login()\ndef events():\n    form = SQLFORM(db.events)\n    if form.accepts(request.vars, session):\n\tresponse.flash = form.vars.Name + " thank you"\n    return dict(form=form)\n\ndef invitations():\n\treturn db(db.events.id > 0).select()\n\ndef case_studies():\n\tform=SQLFORM(db.case_studies)\n\tif form.accepts(request.vars, session):\n\t\tresponse.flash = form.vars.Name + " thank you"\n\treturn dict(form=form)\ndef case_studies_result():\n\treturn db(db.case_studies.id > 0).select()\n\n\nresponse._vars=response._caller(events)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/krutarth/Downloads/911india/gluon/restricted.py", line 205, in restricted\n    exec ccode in environment\n  File "/home/krutarth/Downloads/911india/applications/911_signin/controllers/default.py", line 204, in <module>\n  File "/home/krutarth/Downloads/911india/gluon/globals.py", line 173, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/krutarth/Downloads/911india/gluon/tools.py", line 2580, in f\n    return action(*a, **b)\n  File "/home/krutarth/Downloads/911india/applications/911_signin/controllers/default.py", line 187, in events\n    form = SQLFORM(db.events)\n  File "/home/krutarth/Downloads/911india/gluon/dal.py", line 6343, in __getattr__\n    return self[key]\n  File "/home/krutarth/Downloads/911india/gluon/dal.py", line 6337, in __getitem__\n    return dict.__getitem__(self, str(key))\nKeyError: \'events\'\n'
p11
s.